RelClause := TypedOpenRegex {
   (?: <string=",">? <string=/that|which|who/>)
}

DefnPronoun := CaseInsensitiveKeywordTagger {
    it
}

NP3NoDetNoRelClauseSimple := TypedOpenRegex {
  (?:@NGNoDet1 @PP*)
}

NP3NoDetNoRelClause := TypedOpenRegex {
  (?:@NGNoDet @PP*)
}

//consume DefnIsa := TypedOpenRegex {
//   (?: (<string=/In/>?  (<Context>: <pos=/NN.*/>) (<string=/,|:/>)?)? @Det? (<string="'">? (<DefinedTerm>: @NP3NoDetNoRelClauseSimple) <string="'">?) ((<string=/is|are|describes/>) | (<string=/refers/> <string=/to/>) | (<string=/is/> <string=/defined/> <string=/as/>)) @Det? (<IsaWhat>:@NP3NoDetNoRelClause))
// |  (?: (<DefinedTerm>:@NP3NoDetNoRelClauseSimple) <string=":"> (<string=/In/>?  (<Context>: <pos=/NN.*/> ) (<string=/,|:/>)?)? ((@DefnPronoun? | (@Det? <string="'">? @NP3NoDetNoRelClauseSimple <string="'">?)) ((<string=/is|are|describes/>) | (<string=/refers/> <string=/to/>) | (<string=/is/> <string=/defined/> <string=/as/>)))? @Det? (<IsaWhat>:@NP3NoDetNoRelClause))
//}

consume DefnIsa := TypedOpenRegex {
    (?: (<string=/In/>?  (<Context>: <pos=/NN.*/>) (<string=/,|:/>)?)? @Det? (<string="'">? (<DefinedTerm>: @NP3NoDetNoRelClauseSimple) <string="'">?) ((<string=/is|are|describes/>) | (<string=/refers/> <string=/to/>) | (<string=/is/> <string=/defined/> <string=/as/>)) @Det? (<IsaWhat>:@NP3NoDetNoRelClause))
 |  (?: (<DefinedTerm>:@NP3NoDetNoRelClauseSimple) <string=":"> ((<string=/In/>?  (<Context>: <pos=/NN.*/>) (<string=/,|:/>)?)? (@DefnPronoun? | (@Det? <string="'">? @NP3NoDetNoRelClauseSimple <string="'">?)) ((<string=/is|are|describes/>) | (<string=/refers/> <string=/to/>) | (<string=/is/> <string=/defined/> <string=/as/>)))? @Det? (<IsaWhat>:@NP3NoDetNoRelClause))
 |  (?: (<DefinedTerm>:@NP3NoDetNoRelClauseSimple) <string=":"> (<string=/In/>?  (<Context>: <pos=/NN.*/>) (<string=/:/>)?)? @Det? (<IsaWhat>:@NP3NoDetNoRelClause))
 |  (?: (<DefinedTerm>:@NP3NoDetNoRelClauseSimple) <string=":"> (<string=/In/>?  (<Context>: <pos=/NN.*/>) (<string=/,/>)) @Det? (<IsaWhat>:(@NGNoDet1 (<string="," | string="or"> @NG1)* (<string=",">? (<string=/and|or|and\/or/> @NG1))?)))
}


consume DefnPattern1 := TypedOpenRegex {
  (?:  (<DefnIsaPart>: @DefnIsa) @RelClause)
 | (?:  (<DefnIsaPart>: @DefnIsa) @RelClause)
}

consume DefnPattern2_1 := TypedOpenRegex {
   (?: (<DefnIsaPart>: @DefnIsa) (<string=/when|where|whereby/>))
 | (?: (<DefnIsaPart>: @DefnIsa) (<string=/when|where|whereby/>))
}

consume DefnPattern2_2 := TypedOpenRegex {
   (?: (<DefnIsaPart>: @DefnIsa) ((<Prep>: <pos="IN">) <string=/which|whom/>))
 | (?: (<DefnIsaPart>: @DefnIsa) ((<Prep>: <pos="IN">) <string=/which|whom/>))
}

consume DefnPattern3 := TypedOpenRegex {
  (?:  (<Fact>: @DefnIsa))
 | (?:  (<Fact>: @DefnIsa))
}
