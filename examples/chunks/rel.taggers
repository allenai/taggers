And := PatternTagger {
  <string=",">? <string=/and|that|which/>
}
Modal := PatternTagger {
  <pos="MD"> <pos="RB">?
}
Be := PatternTagger {
  <lemma="be"> <pos="RB">?
}
Help := PatternTagger {
  <lemma=/(help|aid|allow|assist|enable)/>
}

EffectRel := TypePatternTagger {
// in order for
(?:<lemma="in"> <string="order"> <string=/for|that/> )
// which helps with
| (?: (?:<string=",">? <string=/and|that|which|to/>)? @Help <string=/with|in/> )
// which helps
| (?: <string=",">? <string=/and|that|which|to/> @Help <string=/with|in/>? )
// which results in
| (?:@And? <string="results"> <string="in"> )
// is the result of
| (?:@And? @Be <pos="DT" | pos="CD">? <string="result"> <string="of"> )
// so that
| (?:<string="so"> <string="that">? )
// and by doing so
| (?:<string="and">? <lemma="by"> <string="doing"> <string="so"> )
// may be one way that
| (?:@Modal? @Be <pos="DT" | pos="CD">? <lemma="way"> <string="that">? )
// which is why
| (?: (?:<string=",">? <string=/and|which/>)? @Modal? @Be <string=/why|how/> )
// by which
| (?: <string="by"> <string="which"> )
}
EffectRelTo := TypePatternTagger {
// in order to
(?:<lemma="in"> <string="order"> <string="to"> )
// which helps to
| (?: (?:<string=",">? <string=/and|that|which|to/>)? @Help <string="to"> )
// may be one way to
| (?:@Modal? @Be <pos="DT" | pos="CD">? <string=/way(s)?/> <string="to"> )
}

CauseRel := TypePatternTagger {
// may be because of
(?:(?:@Modal? @Be)? <lemma="because"> <string="of">? )
// may be caused by
| (?:@Modal? @Be <string="caused"> <string="by"> )
// which causes
| (?:@And? <lemma="cause"> )
// may be due to
| (?:@Modal? @Be? <lemma="due"> <string="to"> )
}

FunctionRel := TypePatternTagger {
// which may be responsible for
(?:@And? @Modal? @Be <string=/used|responsible/> <string="for"> )
}
FunctionRelTo := TypePatternTagger {
// which may be used to
(?:@And? @Modal? @Be <string="used"> <string="to"> )
}

ExampleRel := TypePatternTagger {
// which may include
(?:@And? @Modal? <lemma="include"> )
// such as
| (?:<string="such"> <string="as"> )
// is an example of
| (?:@And? @Modal? @Be? <pos="DT">? <lemma="example"> <string="of"> )
// is a
| (?:@And? <string="is"> <string=/a(n)?/> )
}

RequiredRel := TypePatternTagger {
// which may be necessary for
(?:@And? @Modal? @Be <string=/necessary|needed|required/> <string="for"> )
}
RequiredRelTo := TypePatternTagger {
// which may be necessary to
(?:@And? @Modal? @Be <string=/necessary|needed|required/> <string="to"> )
}


Rel := TypePatternTagger {
  (?:@EffectRel | @CauseRel | @ExampleRel)
}

RelTo := TypePatternTagger {
  (?:@EffectRelTo | @FunctionRelTo | @RequiredRelTo)
}

RelFor := TypePatternTagger {
  (?:@FunctionRel | @RequiredRel)
}

