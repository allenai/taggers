SimpleNounChunk := PatternTagger {
  <chunk="B-NP"> <chunk="I-NP">* <pos="POS">? <chunk="I-NP">*
}

NounChunk := TypePatternTagger {
  (?:@SimpleNounChunk <string="of">)* @SimpleNounChunk
}

SimpleProperNounChunk := PatternTagger {
  (?:<chunk="B-NP" & pos=/NNPS?/> <chunk="I-NP">*) | (?:<chunk="B-NP"> <chunk="I-NP">* <chunk="I-NP" & pos=/NNPS?/> <chunk="I-NP">*)
}

ProperNounChunk := TypePatternTagger {
  (?:@SimpleNounChunk <string="of">)* @SimpleProperNounChunk
}

SingularProperNoun := PatternTagger {
  <pos="NN">* <pos="NNP">+ <pos=/NN|NNP/>*
}

// "Barack Obama is the president of the United States."
// (Barack Obama, is the president of, the United States)
VerbBasedExtraction := TypePatternTagger {
  (<Arg1>: @NounChunk)
  (<Rel>: <lemma='be'> <pos='DT'>? @NounChunk <pos='IN'>)
  (<Arg2>: @NounChunk)
}

// "Chris Curran, a lawyer for Al-Rajhi Banking"
// (Chris Curran, (is) a lawyer (for), Al-Rajhi Banking)
AppositiveExtraction := TypePatternTagger {
  (<Arg1>: @ProperNounChunk)

  <string=",">

  (<Rel>:
    // any article
    <string=/a|an|the/>

    // adjective or noun
    <pos=/JJ|VBD|VBN|NN|NNP/>*

    // {relnoun} {preposition}
    @RelationalNoun <pos="IN">)

  // {chunk}, the relnoun may have been incorrectly identified
  // as the beginning of the chunk
  (<Arg2>: <chunk=/.-NP/> <chunk="I-NP">*)
}

// "U.S. leader Barack Obama"
// (Barack Obama, (is) leader (of), U.S.)
AdjectiveDescriptorExtractor := TypePatternTagger {
  // adjective
  (<adj>: <pos=/JJ|VBD|VBN/>*)

  // proper noun (no prepositions)
  (<Arg1>: <pos=/NNS?|NNPS?/>+)

  (<Rel>: @RelationalNoun)

  // Proper noun (no prepositions)
  (<Arg2>: @SingularProperNoun)
}

// "AUC's leader, Carlos Castano"
// (Carlos Castano, (is) leader (of), AUC)
PossessiveAppositiveExtractor := TypePatternTagger {
  // proper noun (could be plural) (no preposition)
  (<Arg2>: <pos=/NNS?/>* <pos=/NNPS?/>+ <pos=/NNS?|NNPS?/>*)

  // {possessive}
  <pos=/POS/> +

  // {adverb} {adjective} {relnoun}
  (<Rel>: <pos=/RB/>* <pos=/JJ|VBD|VBN/>* @RelationalNoun)

  // {proper noun} (no preposition)
  // the proper noun is required to distinguish this noun from the previous
  // consider: Baghdad's deputy governor (deputy is a relnoun)
  (<Arg1>: @SingularProperNoun)
}

// "AUC's leader, Carlos Castano"
// (Carlos Castano, (is) leader (of), AUC)
PossessiveAdjectiveExtractor := TypePatternTagger {
  // Proper noun (could be plural) (no preposition)
  (<Arg2>: <pos=/NNS?|NNPS?/>+)

  // Possessive
  <pos=/POS/>

  // {adverb} {adjective} {relnoun}
  (<Rel>: <pos=/RB/>* <pos=/JJ|VBD|VBN/>* @RelationalNoun)

  // comma
  <string=/,/>

  (<Arg1>: @ProperNounChunk)
}

// "AUC's leader is Carlos Castano"
// (Carlos Castano, (is) leader (of), AUC)
PossessiveIsExtractor := TypePatternTagger {
  // {nouns} (no preposition)
  (<Arg2>: <pos='DT'>? <pos='RB.*'>* <pos='JJ.*'>* <pos=/NNS?|NNPS?/>+)

  // {possessive}
  <pos='POS'>

  // {adverb} {adjective} {relnoun}
  (<Rel>: <pos='RB'>* <pos=/JJ|VBD|VBN/>* @RelationalNoun)

  // be
  (<lemma=/be/>)

  // {proper np chunk}
  (<Arg1>: @ProperNounChunk)
}

// "Jack is John's son"
// (Jack, (is) son (of), John)
IsPossessiveExtractor := TypePatternTagger {
  // {nouns} (no preposition)
  (<Arg1>: @ProperNounChunk)

  (<lemma=/be/>)

  (<Arg2>: @ProperNounChunk)
  <pos='POS'>
  (<Rel>: <pos=/RB/>* <pos=/JJ|VBD|VBN/>* @RelationalNoun)
}

// "The father of Jack is John."
// (John, is the father of, Jack)
OfIsExtractor := TypePatternTagger {
  (<Rel>: <chunk="B-NP"> <chunk="I-NP">* <typeStart="RelationalNoun" & typeEnd="RelationalNoun">)
  (<string="of">)
  (<Arg2>: <chunk=/.-NP/> <chunk="I-NP">*)
  (<lemma="be">)
  (<Arg1>: <chunk="B-NP"> <chunk="I-NP">*)
}

// Mohammed Jamal, bin Laden's brother
// (Mohammed Jamal, (is) brother (of), bin Laden)
PossessiveReverseExtractor := TypePatternTagger {
  // proper noun (no preposition)
  (<Arg1>: @ProperNounChunk)

  // comma
  <string=",">

  // Noun chunk
  (<Arg2>: @NounChunk)

  // {possessive}
  <pos="POS">

  // {adverb} {adjective} {relnoun}
  (<Rel>: <pos="RB">* <pos=/JJ|VBD|VBN/>* @RelationalNoun)

  // make sure the relnoun isn't part of a larger np-chunk
  // consider: "...spokesman Suleiman Abu Ghaith , Al-Qaeda 's military chief Saif al-Adel , and two of Osama bin Laden 's sons..."
  (?:<!chunk="I-NP">|$)
}

// Obama, the US president.
// (Obama, (is) president (of), U.S.)
ProperNounAdjectiveExtractor := TypePatternTagger {
  (<Arg1>: @ProperNounChunk)
  <string=",">
  (<string=/a|an|the/> <pos=/JJ|VBD|VBN/>*)
  (<Arg2>: <pos=/NNP|NN/>* <pos="NNP">+)
  (<Rel>: <pos="NN">* @RelationalNoun)
}
