import NounChunk
import ReVerbExtraction.Arg1
import ReVerbExtraction.Rel
import ReVerbExtraction.Arg2
import Wp

NestedIndicatorVerb := LemmatizedKeywordTagger {
    be
    say
    have
    believe
    tell
    suggest
    argue
    indicate
    claim
    note
    know
    show
    state
    find
    conclude
    report
    means
    announce
    think
    warn
    write
    add
    demonstrate
    appear
    reveal
    agree
    assert
    acknowledge
    hope
    realize
    fear
    suspect
    mean
    feel
    see
    explain
    confirm
    mention
    ask
    seem
    observe
    estimate
    admit
    recognize
    allege
    insist
    require
    discover
    declare
    imply
    give
    deny
    understand
    express
    recommend
    worry
    point
    maintain
    contend
    stress
    prove
    demand
    learn
    hear
    assume
    predict
    inform
    complain
    reflect
    provide
    hold
    testify
    request
    notice
    assess
    remind
    wish
    speculate
    raise
    forget
    decide
    promise
    pray
    expect
    ensure
    challenge
    recall
    present
    determine
    doubt
    concede
    reply
    reject
    propose
    make
    include
    emphasize
    concern
    charge
    take
    remains
    receive
    exist
    assure
    teach
    rule
    respond
    remember
    reinforce
    happen
    do
    caution
    underscore
    turn
    threaten
    signal
    repeat
    release
    relate
    presume
    discuss
    confess
    bear
    advise
    trust
    reiterate
    disclose
    dictate
    convince
    consider
    anticipate
    answer
    accept
    will
    swear
    regret
    order
    issue
    increase
    illustrate
    ignore
    establish
    continue
    certify
    bemoan
    affirm
    surface
    support
    seize
    sa
    refute
    prompt
    posit
    offer
    live
    leave
    lack
    invite
    imagine
    highlight
    follow
    fail
    examine
    build
    boast
    begin
    urge
    theorize
    represent
    remain
    reason
    proclaim
    pretend
    postulate
    perceive
    outline
    mark
    list
    judge
    guarantee
    grasp
    go
    face
    emerge
    echo
    dispute
    deserve
    describe
    decree
    control
    contain
    cite
    cause
    brag
    bolster
    aver
    alert
    wwa
    vow
    voice
    use
    underline
    thank
    survey
    strengthen
    spread
    specify
    speak
    signify
    sense
    send
    rebuff
    read
    reach
    put
    protest
    prescribe
    postpone
    pledge
    pick
    persuade
    operate
    object
    need
    nag
    muslim
    mirror
    lose
    lessen
    keep
    get
    generate
    form
    explore
    eply
    embody
    dismiss
    disagree
    detonate
    denounce
    come
    claus
    clarify
    circulate
    call
    brush
    bring
    alarm
}

NestedIndicatorChunk := TypePatternTagger {
    <chunk=/.-VP/ & pos=/VB.?/ & typeStart="NestedIndicatorVerb">
}

NestedRelation := TypePatternTagger {
    (?:(?:(?:<pos='RB'>? <pos='MD'>? @NestedIndicatorChunk) <pos=/RP|TO/>? <pos='RB'>?)+
      (?:(?:<chunk=/B-NP.*/> <chunk=/I-NP.*/>*)*)) |
    (?:(?:<pos='RB'>? <pos='MD'>? (?:<chunk=/.-VP/ & pos=/VB.?/>) <pos=/RP|TO/>? <pos='RB'>?)+
      (?:(?:<chunk="B-NP"> <chunk="I-NP">*)* <string='that'>))
}

NestedExtraction := TypePatternTagger {
  // A noun phrase, with optional PP attachment (don't allow because)
  (<Arg1>:@NounChunk)
  // If there is a who/which, skip it
  @WP?
  // Followed by a nested relation phrase
  (<NestedRelation>:@NestedRelation)
  (<BaseArg1>: @ReVerbExtraction.Arg1)
  // Followed by a base relation phrase
  (<BaseRelation>: @ReVerbExtraction.Rel)
  // Followed by another noun phrase
  (<BaseArg2>: @ReVerbExtraction.Arg2)
}
